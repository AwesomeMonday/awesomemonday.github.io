I"°<p>Hello, this is Hao.</p>

<p>Word cloud doesnâ€™t provide much of statistical meaning itself. But it is great for text comparisons and itâ€™s very fun to look at. So today, I will make a wordcloud about what the customers say about one of the top rated Asian restaurants in the New York city area.</p>

<p>This is for exploratory purposes only, the reason I picked this restaurant is simply because the amount of reviews is large enough to be statistical significant, but not too large to be picked up by anti scraping bot from the website, in order to block my IP address.</p>

<p>I will use the these 2 R packages for this, if you donâ€™t have them installed, you can run the following code.</p>
<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">install.packages</span><span class="p">(</span><span class="s2">"wordcloud2"</span><span class="p">)</span><span class="w">
</span><span class="n">install.packages</span><span class="p">(</span><span class="s2">"tm"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<p>load in libraries</p>
<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">tidyverse</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">wordcloud2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">tm</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">rvest</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">lubridate</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>pull the info from the first page, I will need the review date, review rating, and review texts
obtaining the rating part is a little tricky, since it doesnâ€™t provde text form but in pictures, and also need to remove other ratings</p>
<pre><code class="language-{r}">rm(list = ls())

url &lt;- "https://www.yelp.com/biz/lovemama-new-york?osq=asian+restaurant"

page &lt;- read_html(url)

date &lt;- page %&gt;% 
  html_nodes(".margin-b1-5__09f24__NHcQi .css-chan6m") %&gt;% 
  html_text2()

user_location &lt;- page %&gt;% 
  html_nodes(".arrange-unit-fill__09f24__CUubG .border-color--default__09f24__NPAKY .border-color--default__09f24__NPAKY .border-color--default__09f24__NPAKY .border-color--default__09f24__NPAKY .css-qgunke") %&gt;% 
  html_text2()

rating &lt;- page %&gt;% 
  html_elements(xpath = "//div[contains(@aria-label, 'rating')]") %&gt;% 
  html_attr("aria-label") %&gt;% 
  str_remove_all(" star rating") %&gt;% 
  as.numeric() %&gt;% 
  head(-10) %&gt;% 
  tail(-1)

review_text &lt;- page %&gt;% 
  html_nodes(".css-qgunke .raw__09f24__T4Ezm") %&gt;% 
  html_text2()
  
review &lt;- tibble(date, user_location, rating, review_text)

</code></pre>

<p>there are 588 pages of reviews, letâ€™s go through with it</p>

<pre><code class="language-{r}">rm(list = ls())

date_all &lt;-  c()
rating_all &lt;- c()
user_location_all &lt;- c()
review_text_all &lt;- c()

for (page_num in seq(from = 0, to = (48*10)-10, by = 10)){
  url &lt;- paste0("https://www.yelp.com/biz/blue-willow-%E5%A4%9C%E6%9D%A5%E6%B9%98-new-york-2?start=", page_num)
  
  page &lt;- read_html(url)

  date &lt;- page %&gt;% 
    html_nodes(".margin-b1-5__09f24__NHcQi .css-chan6m") %&gt;% 
    html_text2()

  user_location &lt;- page %&gt;% 
    html_nodes(".arrange-unit-fill__09f24__CUubG .border-color--default__09f24__NPAKY .border-color--default__09f24__NPAKY .border-color--default__09f24__NPAKY .border-color--default__09f24__NPAKY .css-qgunke") %&gt;% 
    html_text2()
  
  rating &lt;- page %&gt;% 
    html_elements(xpath = "//div[contains(@aria-label, 'rating')]") %&gt;% 
    html_attr("aria-label") %&gt;% 
    str_remove_all(" star rating") %&gt;% 
    as.numeric() %&gt;% 
    tail(-1)
  
  review_text &lt;- page %&gt;% 
    html_nodes(".css-qgunke .raw__09f24__T4Ezm") %&gt;% 
    html_text2()
  
  date_all &lt;- append(date_all, date)
  rating_all &lt;- append(rating_all, rating)
  user_location_all &lt;- append(user_location_all, user_location)
  review_text_all &lt;- append(review_text_all, review_text)
  
  print(paste("page", (page_num+10)/10))
  print("taking a break")
  
  Sys.sleep(5)
  
}

str(date_all)
str(review_text_all)
str(user_location_all)
str(rating_all)
reviews &lt;- tibble("date" = head(date_all, 453),
                  "rating" = head(rating_all, 453),
                  "user_location" = head(user_location_all, 453),
                  "review_text" = head(review_text_all, 453))

View(reviews)

reviews &lt;- reviews %&gt;% 
  mutate(date = mdy(date)) 

reviews &lt;- reviews %&gt;% 
  mutate(user_location = str_sub(user_location, -2)) 

reviews &lt;- reviews%&gt;% 
  mutate(user_location = toupper(user_location))

reviews %&gt;% 
  mutate(month = month(date, label = T)) %&gt;% 
  group_by(month) %&gt;% 
  summarise(total = n()) %&gt;% 
  ggplot(aes(month, total, fill = month)) +
  geom_col()

write_csv(reviews, file = "C://Users//haoli//Desktop//restaurant_review.csv")

</code></pre>

<pre><code class="language-{r}">review_corpus &lt;- Corpus(VectorSource(reviews$review_text))

review_corpus &lt;- review_corpus %&gt;% 
  tm_map(removeNumbers) %&gt;% 
  tm_map(removePunctuation) %&gt;% 
  tm_map(stripWhitespace) %&gt;% 
  tm_map(content_transformer(tolower)) %&gt;% 
  tm_map(removeWords, stopwords("english")) %&gt;% 
  tm_map(removeWords, stopwords("SMART")) %&gt;% 
  tm_map(removeWords, c("blue", "willow", "good", "great", "restaurant", "dish", "chinese", "place", "ordered"))

tdm &lt;- TermDocumentMatrix(review_corpus) %&gt;% 
  as.matrix()

words &lt;- sort(rowSums(tdm), decreasing = TRUE)

df &lt;- data.frame(word = names(words), freq = words)

wordcloud2(df)

?tm_map
</code></pre>

:ET